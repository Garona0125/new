/*
 * Copyright (C) 2008-2012 TrinityCore <http://www.trinitycore.org/>
 *
 * Copyright (C) 2010-2015 QuantumCore <http://vk.com/quantumcore>
 *
 * Copyright (C) 2010-2012 MaNGOS project <http://getmangos.com>
 *
 */

#include "ScriptMgr.h"
#include "QuantumCreature.h"
#include "QuantumGossip.h"
#include "Config.h"
#include "world_fun_system.h"

class npc_quantum_fun_controller_new : public CreatureScript
{
public:
    npc_quantum_fun_controller_new() : CreatureScript("npc_quantum_fun_controller_new") {}

    struct npc_quantum_fun_controller_newAI : public QuantumBasicAI
    {
        npc_quantum_fun_controller_newAI(Creature* creature) : QuantumBasicAI(creature), Summons(me)
		{
			if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) && !sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE))
			{
				if (me->GetAreaId() == AREA_HALDARR_ENCAMPMENT)
					SummonHordeGameObjects();

				if (me->GetAreaId() == AREA_GRIM_BATOL)
					SummonAllianceGameObjects();
				
				if (me->GetAreaId() == AREA_EBON_HOLD)
				{
					if (GameObject* Teleporter = me->SummonGameObject(GO_FUN_TELEPORTER_NEW, 2363.48f, -5657.93f, 426.038f, 3.77621f, 0, 0, 0.950079f, -0.31201f, 7*DAY))
					{
						Teleporter->SetGoState(GO_STATE_ACTIVE);
						Teleporter->SetPhaseMask(65535, true);
					}
				}
				// Blood Elf
				if (me->GetAreaId() == AREA_SUNSTRIDER_ISLE)
				{
					if (GameObject* Teleporter = me->SummonGameObject(GO_FUN_TELEPORTER_NEW, 10360.9f, -6325.85f, 30.1138f, 3.23747f, 0, 0, 0.998851f, -0.0479217f, 7*DAY))
						Teleporter->SetGoState(GO_STATE_ACTIVE);
				}
				//Draenei
				if (me->GetAreaId() == AREA_AMMEN_VALE)
				{
					if (GameObject* Teleporter = me->SummonGameObject(GO_FUN_TELEPORTER_NEW, -4000.31f, -13894.4f, 94.5673f, 0.515198f, 0, 0, 0.25476f, 0.967004f, 7*DAY))
						Teleporter->SetGoState(GO_STATE_ACTIVE);
				}
				// Undead
				if (me->GetAreaId() == AREA_SHADOW_GRAVE)
				{
					if (GameObject* Teleporter = me->SummonGameObject(GO_FUN_TELEPORTER_NEW, 1664.36f, 1678.01f, 120.53f, 0.173132f, 0, 0, 0.0864579f, 0.996256f, 7*DAY))
						Teleporter->SetGoState(GO_STATE_ACTIVE);
				}
				// Hight Elf
				if (me->GetAreaId() == AREA_SHADOWGLEN)
				{
					if (GameObject* Teleporter = me->SummonGameObject(GO_FUN_TELEPORTER_NEW, 10339.8f, 823.495f, 1326.37f, 2.12722f, 0, 0, 0.874115f, 0.485718f, 7*DAY))
						Teleporter->SetGoState(GO_STATE_ACTIVE);
				}
			}
		}

		SummonList Summons;

		uint32 ResetFunSystemTimer;

        void Reset()
		{
			if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) && !sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE))
			{
				DoCast(me, SPELL_WILD_GROWTH_VISUAL);

				if (me->GetAreaId() == AREA_HALDARR_ENCAMPMENT)
					SummonHordeCreatures();

				if (me->GetAreaId() == AREA_GRIM_BATOL)
					SummonAllianceCreatures();
			}

			ResetFunSystemTimer = 35*MINUTE*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

		void SummonHordeCreatures()
		{
			// Trainers
			me->SummonCreature(NPC_PALADIN_TRAINER, 3284.53f, -4473.58f, 102.613f, 1.07585f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MAGE_TRAINER, 3282.04f, -4470.8f, 102.658f, 0.769026f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHAMAN_TRAINDER, 3280.44f, -4468.17f, 102.671f, 0.670851f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PRIEST_TRAINER, 3278.54f, -4466.18f, 102.584f, 0.742774f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WARRIOR_TRAINER, 3276.84f, -4464.12f, 102.451f, 0.705565f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_HUNTER_TRAINER, 3274.92f, -4461.06f, 102.194f, 0.643526f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ROGUE_TRAINER, 3273.47f, -4458.07f, 102.01f, 0.368309f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DRUID_TRAINER, 3272.93f, -4454.71f, 101.978f, 0.167822f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WARLOCK_TRAINER, 3272.63f, -4451.34f, 101.953f, 0.256242f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DK_TRAINER, 3272.57f, -4448.78f, 101.98f, 0.125255f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MOUNT_TRAINER, 3272.84f, -4446.25f, 102.069f, 0.079649f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WEAPON_TRAINER, 3272.89f, -4443.86f, 102.229f, 0.00777626f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PROFESSION_TRAINER, 3287.49f, -4474.92f, 102.887f, 1.53912f, TEMPSUMMON_MANUAL_DESPAWN);
			// Mounts/Misc/Quests
			me->SummonCreature(NPC_FIREWORKS_VENDOR, 3267.17f, -4433.4f, 102.515f, 0.651916f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OLD_MOUNT_VENDOR, 3266.05f, -4431.29f, 102.552f, 0.553742f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MOUNT_VENDOR, 3265.05f, -4428.72f, 102.598f, 0.404445f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PETS_VENDOR, 3264.18f, -4426.42f, 102.615f, 0.302133f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ITEM_1_EPIC_VENDOR, 3263.49f, -4424.06f, 102.629f, 0.368916f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FUNNY_VENDOR, 3262.91f, -4421.6f, 102.642f, 0.21969f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CARTEL_QUESTS, 3263.89f, -4407.87f, 103.259f, 5.80241f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BC_QUESTS, 3263.27f, -4412.45f, 102.87f, 6.14509f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WOTLK_QUESTS, 3263.07f, -4416.09f, 102.781f, 6.28167f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CLASSIC_QUESTS, 3262.61f, -4419.05f, 102.673f, 0.08802f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arrows/Bullets/Bags/Keys/
			me->SummonCreature(NPC_ARROW_VENDOR, 3269.41f, -4404.94f, 104.335f, 4.95026f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BAG_VENDOR, 3271.87f, -4404.55f, 104.608f, 4.88822f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PROF_BAG_VENDOR, 3274.54f, -4404.19f, 104.727f, 4.84344f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_AMMO_VENDOR, 3277.23f, -4403.69f, 104.871f, 4.83794f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_KEYS_VENDOR, 3280.05f, -4403.31f, 104.945f, 4.83794f, TEMPSUMMON_MANUAL_DESPAWN);
			// Profession reagents
			me->SummonCreature(NPC_INSCRIPTION, 3283.76f, -4402.89f, 105.085f, 4.94441f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ENCHANTING, 3285.97f, -4402.57f, 105.186f, 4.95069f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ELEMENTAL, 3288.28f, -4402.25f, 105.265f, 4.83995f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MEAT_HERB, 3290.39f, -4402.5f, 105.195f, 4.81717f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_METAL_STONE, 3292.43f, -4402.3f, 105.133f, 4.72292f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_JEWEL_CLOTH, 3294.3f, -4402.68f, 105.05f, 4.56898f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DEVICE_EXPLOSIVE, 3296.57f, -4402.53f, 104.955f, 4.81796f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRADE_GOODS, 3298.72f, -4402.41f, 105.039f, 4.84937f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OLD_REAGENTS_VENDOR, 3301.12f, -4401.88f, 105.156f, 4.72834f, TEMPSUMMON_MANUAL_DESPAWN);
			// Glyphs
			me->SummonCreature(NPC_GLYPH_WARLOCK_DRUID, 3305.22f, -4400.85f, 105.278f, 4.94982f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_SHAMAN_MAGE, 3307.3f, -4400.63f, 105.32f, 4.95283f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_PRIEST_DK, 3309.48f, -4400.11f, 105.268f, 5.0026f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_HUNTER_ROGUE, 3312.06f, -4399.56f, 105.173f, 5.0403f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_WARRIOR_PALADIN, 3314.52f, -4398.82f, 104.932f, 5.09135f, TEMPSUMMON_MANUAL_DESPAWN);
			// Sockets
			me->SummonCreature(NPC_PRISMATIC_SOCKET, 3317.23f, -4397.91f, 104.648f, 5.02679f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_META_SOCKET, 3319.2f, -4397.24f, 104.332f, 5.03072f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ORANGE_SOCKET, 3321.14f, -4396.59f, 104.056f, 5.22487f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GREEN_SOCKET, 3323.13f, -4396.08f, 103.738f, 5.02679f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PURPLE_SOCKET, 3324.94f, -4395.54f, 103.488f, 4.94825f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_YELLOW_SOCKET, 3326.6f, -4395.13f, 103.264f, 4.9993f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BLUE_SOCKET, 3328.39f, -4394.85f, 103.064f, 4.93254f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_RED_SOCKET, 3330.01f, -4394.47f, 102.943f, 4.92312f, TEMPSUMMON_MANUAL_DESPAWN);
			// Scrolls/Enchantments/Food/Reputation
			me->SummonCreature(NPC_REAGENT_VENDOR, 3313.65f, -4424.21f, 106.425f, 4.1024f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ELIXIR_VENDOR, 3312.02f, -4422.45f, 106.605f, 3.75284f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FOOD_DRINK_VENDOR, 3311.55f, -4420.12f, 106.794f, 3.03954f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_POTIONS_VENDOR, 3312.75f, -4418.42f, 106.859f, 2.4073f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FLASK_VENDOR, 3314.37f, -4417.54f, 106.824f, 1.98487f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SCROLL_VENDOR, 3316.2f, -4417.39f, 106.714f, 1.77504f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ENCHANTMENT_VENDOR, 3316.16f, -4425.53f, 106.199f, 4.16646f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BANDAGE_VENDOR, 3319.19f, -4425.33f, 105.943f, 4.96008f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_REPUTATION_VENDOR, 3321.53f, -4424.14f, 105.766f, 5.37195f, TEMPSUMMON_MANUAL_DESPAWN);
			// Shield/Trinkets/Shirts/Rings/Tabards
			me->SummonCreature(NPC_SHIRT_TABARD_VENDOR, 3341.83f, -4392.41f, 103.656f, 4.8597f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CLOACK_VENDOR, 3343.9f, -4391.99f, 103.957f, 4.93038f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHIELD_VENDOR, 3346.06f, -4391.4f, 104.269f, 4.92837f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TOTEM_RELIC_VENDOR, 3348.05f, -4391.2f, 104.566f, 4.90682f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OFFHAND_VENDOR, 3350.24f, -4390.55f, 104.89f, 4.91467f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_NECKLACE_VENDOR, 3334.02f, -4394.08f, 102.932f, 4.99103f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FINGERS_VENDOR, 3336.06f, -4393.48f, 103.046f, 4.96056f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRINKETS_1_VENDOR, 3338.01f, -4393.29f, 103.203f, 4.83238f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRINKETS_2_VENDOR, 3339.88f, -4392.8f, 103.417f, 4.9029f, TEMPSUMMON_MANUAL_DESPAWN);
			// Weapons vendor
			me->SummonCreature(NPC_HEIRLOOM_VENDOR, 3353.83f, -4389.82f, 105.506f, 4.59608f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_THROWN_BOW_VENDOR, 3356.47f, -4390.71f, 105.852f, 3.70602f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DAGGER_FIST_VENDOR, 3357.79f, -4393.03f, 106.022f, 3.70052f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_STAFF_VENDOR, 3359.25f, -4395.05f, 106.112f, 3.73822f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_POLEARM_SWORD_VENDOR, 3359.84f, -4397.27f, 106.053f, 3.45483f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_AXE_VENDOR, 3359.97f, -4399.67f, 106.022f, 3.16187f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GUN_VENDOR, 3359.59f, -4402.2f, 106.071f, 2.96238f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MACE_VENDOR, 3358.82f, -4404.63f, 105.944f, 2.96239f, TEMPSUMMON_MANUAL_DESPAWN);
			// Armor vendors
			me->SummonCreature(NPC_HEAD_VENDOR, 3357.98f, -4407.43f, 105.598f, 3.03523f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CHEST_ROBE_VENDOR, 3357.32f, -4409.52f, 105.249f, 3.00654f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_LEGS_PANTS_VENDOR, 3357.04f, -4411.71f, 104.851f, 2.96847f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLOVES_HANDS_VENDOR, 3356.85f, -4413.8f, 104.462f, 2.89228f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHOULDERS_VENDOR, 3356.61f, -4415.88f, 103.988f, 2.92292f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WAIST_LIGHT_VENDOR, 3355.51f, -4419.28f, 103.44f, 2.7138f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BOOTS_LIGHT_VENDOR, 3354.62f, -4421.38f, 103.2f, 2.73736f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BRACERS_LIGHT_VENDOR, 3353.53f, -4423.35f, 102.881f, 2.6117f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WAIST_HEAVY_VENDOR, 3351.57f, -4426.1f, 102.43f, 2.59828f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BOOTS_HEAVY_VENDOR, 3349.95f, -4428.29f, 102.044f, 2.53095f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BRACERS_HEAVY_VENDOR, 3348.46f, -4430.21f, 101.818f, 2.51132f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_NONSET_VENDOR, 3346.7f, 4432.6f, 4432.6f, 2.57689f, TEMPSUMMON_MANUAL_DESPAWN);
			// Tier Set vendors
			me->SummonCreature(NPC_TIER_1_VENDOR, 3346.76f, -4432.09f, 101.622f, 2.71572f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_2_VENDOR, 3344.84f, -4434.32f, 101.567f, 2.68614f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_3_VENDOR, 3342.12f, -4438.95f, 101.72f, 2.73929f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_4_VENDOR, 3341.22f, -4440.46f, 101.772f, 2.73192f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_5_VENDOR, 3340.43f, -4442.27f, 101.772f, 2.80604f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_6_VENDOR, 3343.67f, -4436.82f, 101.594f, 2.71572f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_7_VENDOR, 3339.46f, -4443.75f, 101.825f, 2.69658f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_8_VENDOR, 3338.95f, -4445.19f, 101.806f, 2.68828f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_9_H_VENDOR, 3338.11f, -4446.72f, 101.843f, 2.66848f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_10_VENDOR, 3331.48f, -4460.38f, 102.771f, 2.73f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arena Season Sets
			me->SummonCreature(NPC_ARENA_SEASON_1_VENDOR, 3337.28f, -4448.14f, 101.975f, 2.72416f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_2_VENDOR, 3336.45f, -4449.84f, 102.116f, 2.79676f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_3_VENDOR, 3335.82f, -4451.41f, 102.242f, 2.74571f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_4_VENDOR, 3335.35f, -4452.93f, 102.333f, 2.74048f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_5_VENDOR, 3334.64f, -4454.15f, 102.494f, 2.62363f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_6_VENDOR, 3333.96f, -4455.63f, 102.602f, 2.64963f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_7_VENDOR, 3333.31f, -4457.07f, 102.663f, 2.69675f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_8_VENDOR, 3332.55f, -4458.47f, 102.718f, 2.76747f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arena Masters/Transmogrification/Spectator/Multi System/Inkeeper/Guard
			me->SummonCreature(NPC_FUNNY_PANDA, 3328.46f, -4466.35f, 106.115f, 2.2673f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, 3293.17f, -4380.98f, 119.697f, 4.85102f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRANSMOGRIFICATION, 3290.85f, -4475.21f, 102.967f, 1.70102f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SPECTATOR, 3314.01f, -4468.35f, 103.315f, 2.20591f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MULTI_SYSTEM, 3305.04f, -4499.38f, 96.8818f, 1.75848f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRAINING_DUMMY, 3290.66f, -4506.5f, 97.7743f, 1.48011f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_BATTLEMASTER, 3316.84f, -4466.85f, 103.485f, 2.18482f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_ORGANIZER, 3311.45f, -4469.17f, 103.254f, 2.20053f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_INKEEPER, 3318.86f, -4465.59f, 103.552f, 2.25551f, TEMPSUMMON_MANUAL_DESPAWN);
			// Sakyra Cometic
			me->SummonCreature(NPC_SAKYRA, 3234.89f, -4469.62f, 97.6754f, 0.839439f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3238.61f, -4472.64f, 97.612f, 1.38058f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3230.78f, -4466.09f, 97.7661f, 0.684293f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3254.09f, -4462.02f, 98.8944f, 2.84392f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3234.41f, -4450.18f, 98.0612f, 5.43337f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3254.72f, -4454.93f, 99.3864f, 3.53728f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3229.09f, -4461.66f, 97.6504f, 0.252107f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3251.3f, -4467.1f, 98.4323f, 98.4323f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3243.19f, -4472.67f, 97.9702f, 1.91072f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3230.02f, -4455.55f, 97.549f, 0.869546f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3247.67f, -4470.73f, 98.0954f, 2.18811f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, 3239.33f, -4446.04f, 98.8967f, 0.401824f, TEMPSUMMON_MANUAL_DESPAWN);
		}

		void SummonHordeGameObjects()
		{
			// Fountain
			if (GameObject* Fountain = me->SummonGameObject(GO_DALARAN_FOUNTAIN, 3238.2f, -4415.72f, 101.083f, 6.19918f, 0, 0, 0, 0, 7*DAY))
			{
				Fountain->SetGoState(GO_STATE_ACTIVE);
				Fountain->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			}
			// Benchs
			me->SummonGameObject(GO_BENCH, 3232.28f, -4409.74f, 100.793f, 5.4974f, 0, 0, 0.382862f, -0.923806f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3228.67f, -4416.11f, 100.993f, 6.12572f, 0, 0, 0.0786537f, -0.996902f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3229.91f, -4422.63f, 101.206f, 0.509326f, 0, 0, 0.251919f, 0.967748f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3234.4f, -4426.8f, 101.439f, 1.16356f, 0, 0, 0.549513f, 0.835485f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3240.6f, -4426.84f, 101.369f, 1.86649f, 0, 0, 0.803557f, 0.595228f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3245.6f, -4423.73f, 101.178f, 2.39943f, 0, 0, 0.931936f, 0.362623f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3248.55f, -4418.11f, 101.343f, 2.99319f, 0, 0, 0.997248f, 0.0741322f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3247.58f, -4411.96f, 101.414f, 3.70005f, 0, 0, 0.961268f, -0.275615f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3242.96f, -4407.93f, 101.26f, 4.32287f, 0, 0, 0.830585f, -0.556892f, 7*DAY);
			me->SummonGameObject(GO_BENCH, 3237.38f, -4407.33f, 100.953f, 4.8663f, 0, 0, 0.650654f, -0.759375f, 7*DAY);
			// Monument/Aura/Offering
			me->SummonGameObject(GO_MOMUMENT, 3225.78f, -4392.35f, 100.872f, 4.45121f, 0, 0, 0.793164f, -0.609008f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, 3225.78f, -4392.35f, 100.872f, 2.90738f, 0, 0, 0.993151f, 0.11684f, 7*DAY);
			me->SummonGameObject(GO_OFFERING, 3224.61f, -4396.75f, 100.433f, 1.36471f, 0, 0, 0.630623f, 0.776089f, 7*DAY);
			// Shaman Shrine/Shrine Aura/
			if (GameObject* Shrine = me->SummonGameObject(GO_SHAMAN_SHRINE, 3202.44f, -4394.42f, 100.004f, 5.87204f, 0, 0, 0.20413f, -0.978944f, 7*DAY))
				Shrine->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			me->SummonGameObject(GO_SHRINE_AURA, 3202.44f, -4394.42f, 100.004f, 5.87204f, 0, 0, 0.20413f, -0.978944f, 7*DAY);
			// Lordaeron Shrine/Uther Shrine/Green Light/Dragon Soul
			if (GameObject* LordaeronShrine = me->SummonGameObject(GO_LORDAERON_SHRINE, 3205.67f, -4420.55f, 99.1212f, 0.724525f, 0, 0, 0.354391f, 0.935097f, 7*DAY))
				LordaeronShrine->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			me->SummonGameObject(GO_UTHER_SHRINE, 3205.67f, -4420.55f, 99.1212f, 0.724525f, 0, 0, 0.354391f, 0.935097f, 7*DAY);
			me->SummonGameObject(GO_UTHER_SHRINE, 3244.75f, -4458.35f, 100.186f, 1.01587f, 0, 0, 0.486376f, 0.87375f, 7*DAY);
			me->SummonGameObject(GO_GREEN_LIGHT, 3218.91f, -4438.06f, 99.9114f, 1.90753f, 0, 0, 0.815601f, 0.578615f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, 3244.81f, -4393.76f, 107.205f, 4.22063f, 0, 0, 0.857956f, -0.513722f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, 3247.31f, -4392.01f, 108.101f, 4.25643f, 0, 0, 0.848624f, -0.528997f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, 3247.2f, -4395.25f, 107.097f, 4.24074f, 0, 0, 0.852748f, -0.522323f, 7*DAY);
			// Coocking Table/Forge/Anvil/Alchemy Laboratory/Mailbox/Runeforge
			me->SummonGameObject(GO_COOCKING_TABLE, 3293.88f, -4475.04f, 102.901f, 5.19105f, 0, 0, 0.519331f, -0.854573f, 7*DAY);
			me->SummonGameObject(GO_FORGE, 3304.75f, -4470.9f, 103.293f, 2.0855f, 0, 0, 0.863794f, 0.503845f, 7*DAY);
			me->SummonGameObject(GO_ANVIL, 3308.52f, -4470.43f, 103.246f, 0.212258f, 0, 0, 0.10593f, 0.994374f, 7*DAY);
			me->SummonGameObject(GO_MAILBOX, 3228.39f, -4419.59f, 101.117f, 0.377654f, 0, 0, 0.187707f, 0.982225f, 7*DAY);
			me->SummonGameObject(GO_ALCHEMY_LAB, 3297.34f, -4474.56f, 102.806f, 5.17534f, 0, 0, 0.526028f, -0.850467f, 7*DAY);
			// History Cosmetic
			me->SummonGameObject(GO_ULDUAR_BRAIZER, 3352.84f, -4385.13f, 106.565f, 4.61157f, 0, 0, 0.741839f, -0.670578f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_BRAIZER, 3335.08f, -4382.38f, 105.927f, 4.42976f, 0, 0, 0.79965f, -0.600466f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, 3215.75f, -4392.04f, 126.909f, 5.75708f, 0, 0, 0.260031f, -0.9656f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, 3222.45f, -4448.69f, 110.558f, 1.18612f, 0, 0, 0.558902f, 0.829234f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, 3301.47f, -4440.98f, 117.039f, 2.74793f, 0, 0, 0.980691f, 0.195563f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_ORB_AURA, 3222.38f, -4449.1f, 101.898f, 1.26271f, 0, 0, 0.590239f, 0.807229f, 7*DAY);
			me->SummonGameObject(GO_HELLSCREAM_STAT, 3214.89f, -4391.26f, 100.311f, 4.90971f, 0, 0, 0.634018f, -0.773318f, 7*DAY);
			me->SummonGameObject(GO_UTHER_STATUE, 3312.37f, -4376.15f, 118.343f, 5.15735f, 0, 0, 0.533656f, -0.845702f, 7*DAY);
			me->SummonGameObject(GO_OWL_STATUE, 3345.68f, -4377.3f, 103.347f, 4.54676f, 0, 0, 0.763176f, -0.646191f, 7*DAY);
			me->SummonGameObject(GO_BLOOD_ELF_STATUE, 3202.19f, -4394.34f, 114.05f, 5.86011f, 0, 0, 0.209962f, -0.977709f, 7*DAY);
			me->SummonGameObject(GO_BLOOD_ELF_STATUE, 3215.17f, -4391.24f, 112.511f, 0.271921f, 0, 0, 0.135542f, 0.990772f, 7*DAY);
			me->SummonGameObject(GO_BLOOD_ELF_STATUE, 3302.59f, -4441.49f, 103.333f, 4.10143f, 0, 0, 0, 0, 7*DAY);
			me->SummonGameObject(GO_WARIAN_STATUE, 3198.56f, -4404.57f, 99.4207f, 5.93975f, 0, 0, 0.170874f, -0.985293f, 7*DAY);
			me->SummonGameObject(GO_KHADGAR_STATUE, 3276.14f, -4373.69f, 125.113f, 4.8337f, 0, 0, 0.662941f, -0.748671f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, 3198.56f, -4404.57f, 99.4207f, 5.93975f, 0, 0, 0.170874f, -0.985293f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, 3275.27f, -4369.39f, 125.748f, 4.70152f, 0, 0, 0.710938f, -0.703255f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, 3275.82f, -4375.73f, 125.435f, 4.87824f, 0, 0, 0.646106f, -0.763248f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, 3312.64f, -4377.14f, 118.548f, 5.26022f, 0, 0, 0.489471f, -0.87202f, 7*DAY);
			me->SummonGameObject(GO_TELESTRA_ENERGY, 3304.99f, -4499.56f, 96.8867f, 1.71728f, 0, 0, 0.756956f, 0.653466f, 7*DAY);
			me->SummonGameObject(GO_TELESTRA_CIRCLE, 3304.99f, -4499.56f, 97.58f, 1.71728f, 0, 0, 0.756956f, 0.653466f, 7*DAY);
		}

		void SummonAllianceCreatures()
		{
			// Trainers
			me->SummonCreature(NPC_PALADIN_TRAINER, -4173.22f, -3320.66f, 231.762f, 4.42129f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MAGE_TRAINER, -4176.12f, -3319.42f, 231.69f, 4.38203f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHAMAN_TRAINDER, -4178.54f, -3318.36f, 231.686f, 4.31527f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PRIEST_TRAINER, -4181.13f, -3317.33f, 231.787f, 4.276f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WARRIOR_TRAINER, -4184.03f, -3316.16f, 231.995f, 4.42915f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_HUNTER_TRAINER, -4187.09f, -3314.83f, 232.429f, 4.38988f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ROGUE_TRAINER, -4189.94f, -3313.14f, 232.714f, 4.34826f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DRUID_TRAINER, -4193.34f, -3311.73f, 232.845f, 4.47874f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WARLOCK_TRAINER, -4196.41f, -3311.51f, 232.852f, 5.05526f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DK_TRAINER, -4198.75f, -3312.25f, 232.701f, 5.25237f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MOUNT_TRAINER, -4213.08f, -3326.01f, 231.673f, 5.07746f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WEAPON_TRAINER, -4216.25f, -3326.91f, 231.66f, 5.13522f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PROFESSION_TRAINER, -4227.03f, -3326.99f, 231.612f, 3.82827f, TEMPSUMMON_MANUAL_DESPAWN);
			// Mounts/Misc/Quests
			me->SummonCreature(NPC_FIREWORKS_VENDOR, -4218.78f, -3330.11f, 231.647f, 5.40878f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OLD_MOUNT_VENDOR, -4206.81f, -3323.19f, 231.844f, 5.30922f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MOUNT_VENDOR, -4209.54f, -3324.67f, 231.734f, 5.10607f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PETS_VENDOR, -4202.78f, -3321.68f, 232.145f, 5.07139f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ITEM_1_EPIC_VENDOR, -4274.71f, -3382.97f, 230.376f, 6.08202f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FUNNY_VENDOR, -4166.58f, -3361.5f, 231.88f, 2.52033f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CARTEL_QUESTS, -4209.88f, -3443.2f, 225.846f, 1.28876f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BC_QUESTS, -4212.88f, -3442.07f, 225.953f, 1.41508f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WOTLK_QUESTS, -4215.55f, -3440.92f, 226.034f, 1.29727f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CLASSIC_QUESTS, -4217.67f, -3440.38f, 226.046f, 1.3012f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arrows/Bullets/Bags/Keys/
			me->SummonCreature(NPC_ARROW_VENDOR, -4176.38f, -3376.83f, 231.121f, 2.79877f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BAG_VENDOR, -4177.1f, -3378.54f, 231.036f, 2.74307f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PROF_BAG_VENDOR, -4177.82f, -3380.23f, 230.909f, 2.69202f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_AMMO_VENDOR, -4178.39f, -3381.86f, 230.78f, 2.71558f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_KEYS_VENDOR, -4179.1f, -3383.51f, 230.658f, 2.86366f, TEMPSUMMON_MANUAL_DESPAWN);
			// Profession reagents
			me->SummonCreature(NPC_INSCRIPTION, -4261.78f, -3343.23f, 231.221f, 5.95502f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ENCHANTING, -4260.97f, -3341.01f, 231.331f, 6.01235f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ELEMENTAL, -4260.51f, -3338.95f, 231.432f, 6.03591f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MEAT_HERB, -4260.06f, -3336.99f, 231.533f, 6.03591f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_METAL_STONE, -4259.55f, -3334.89f, 231.652f, 6.01864f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_JEWEL_CLOTH, -4259.06f, -3333.05f, 231.743f, 6.03827f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DEVICE_EXPLOSIVE, -4258.29f, -3330.85f, 231.812f, 6.08173f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRADE_GOODS, -4257.54f, -3328.53f, 231.879f, 6.04222f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OLD_REAGENTS_VENDOR, -4256.85f, -3325.59f, 231.965f, 5.93507f, TEMPSUMMON_MANUAL_DESPAWN);
			// Glyphs
			me->SummonCreature(NPC_GLYPH_WARLOCK_DRUID, -4151.74f, -3332.41f, 232.6f, 3.95868f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_SHAMAN_MAGE, -4152.81f, -3331.26f, 232.583f, 4.04979f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_PRIEST_DK, -4153.97f, -3330.2f, 232.554f, 4.03403f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_HUNTER_ROGUE, -4155.23f, -3328.94f, 232.512f, 4.04484f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLYPH_WARRIOR_PALADIN, -4156.36f, -3327.63f, 232.447f, 3.96654f, TEMPSUMMON_MANUAL_DESPAWN);
			// Sockets
			me->SummonCreature(NPC_PRISMATIC_SOCKET, -4179.57f, -3386.33f, 230.472f, 4.32885f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_META_SOCKET, -4178.28f, -3387.23f, 230.363f, 4.28958f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ORANGE_SOCKET, -4176.96f, -3388.12f, 230.251f, 4.28699f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GREEN_SOCKET, -4175.6f, -3389.07f, 230.128f, 4.33018f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_PURPLE_SOCKET, -4174.55f, -3389.83f, 230.03f, 4.25187f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_YELLOW_SOCKET, -4173.53f, -3390.52f, 229.941f, 4.14192f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BLUE_SOCKET, -4172.44f, -3391.32f, 229.835f, 4.20082f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_RED_SOCKET, -4171.51f, -3392.24f, 229.721f, 4.18119f, TEMPSUMMON_MANUAL_DESPAWN);
			// Scrolls/Enchantments/Food/Reputation
			me->SummonCreature(NPC_REAGENT_VENDOR, -4149.63f, -3334.36f, 232.547f, 3.95135f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ELIXIR_VENDOR, -4148.41f, -3336.02f, 232.439f, 3.94742f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FOOD_DRINK_VENDOR, -4147.74f, -3337.77f, 232.364f, 3.2134f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_POTIONS_VENDOR, -4148.69f, -3339.77f, 232.325f, 2.31614f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FLASK_VENDOR, -4150.37f, -3341.6f, 232.385f, 2.31614f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SCROLL_VENDOR, -4152.1f, -3343.48f, 232.422f, 2.3075f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ENCHANTMENT_VENDOR, -4153.92f, -3344.94f, 232.217f, 2.45673f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BANDAGE_VENDOR, -4155.51f, -3346.87f, 232.272f, 2.39625f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_REPUTATION_VENDOR, -4157.07f, -3348.65f, 232.388f, 2.30275f, TEMPSUMMON_MANUAL_DESPAWN);
			// Shield/Trinkets/Shirts/Rings/Tabards
			me->SummonCreature(NPC_SHIRT_TABARD_VENDOR, -4167.7f, -3363.15f, 231.851f, 2.60044f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CLOACK_VENDOR, -4168.82f, -3364.59f, 231.818f, 2.62008f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHIELD_VENDOR, -4170.18f, -3366.34f, 231.775f, 2.61656f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TOTEM_RELIC_VENDOR, -4170.92f, -3367.7f, 231.73f, 2.71765f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_OFFHAND_VENDOR, -4171.93f, -3369.32f, 231.671f, 2.57647f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_NECKLACE_VENDOR, -4173.44f, -3370.94f, 231.573f, 2.7213f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_FINGERS_VENDOR, -4174.31f, -3372.78f, 231.381f, 2.6032f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRINKETS_1_VENDOR, -4174.96f, -3373.94f, 231.273f, 2.62385f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRINKETS_2_VENDOR, -4175.69f, -3375.26f, 231.19f, 2.74166f, TEMPSUMMON_MANUAL_DESPAWN);
			// Weapons vendor
			me->SummonCreature(NPC_HEIRLOOM_VENDOR, -4233.03f, -3358.28f, 231.516f, 5.92401f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_THROWN_BOW_VENDOR, -4234.15f, -3360.44f, 231.502f, 5.92494f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_DAGGER_FIST_VENDOR, -4235.11f, -3362.83f, 231.469f, 5.96499f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_STAFF_VENDOR, -4236.1f, -3365.26f, 231.417f, 6.00033f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_POLEARM_SWORD_VENDOR, -4237.01f, -3367.84f, 231.335f, 5.98463f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_AXE_VENDOR, -4237.91f, -3370.27f, 231.214f, 5.92179f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GUN_VENDOR, -4238.8f, -3372.53f, 231.069f, 6.00426f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MACE_VENDOR, -4239.62f, -3374.69f, 230.923f, 5.97677f, TEMPSUMMON_MANUAL_DESPAWN);
			// Armor vendors
			me->SummonCreature(NPC_HEAD_VENDOR, -4228.41f, -3347.36f, 232.217f, 6.0581f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_CHEST_ROBE_VENDOR, -4229.18f, -3349.53f, 232.044f, 6.04397f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_LEGS_PANTS_VENDOR, -4229.96f, -3351.7f, 231.779f, 6.02588f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_GLOVES_HANDS_VENDOR, -4230.89f, -3353.79f, 231.541f, 5.78909f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SHOULDERS_VENDOR, -4231.73f, -3355.55f, 231.522f, 5.87854f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WAIST_LIGHT_VENDOR, -4223.72f, -3331.93f, 231.59f, 6.04278f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BOOTS_LIGHT_VENDOR, -4224.26f, -3334.05f, 231.614f, 6.16005f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BRACERS_LIGHT_VENDOR, -4224.91f, -3336.18f, 231.668f, 5.80174f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_WAIST_HEAVY_VENDOR, -4226.01f, -3339.29f, 231.764f, 5.84634f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BOOTS_HEAVY_VENDOR, -4226.83f, -3341.91f, 231.916f, 5.88561f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_BRACERS_HEAVY_VENDOR, -4227.65f, -3344.45f, 232.13f, 5.94844f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_NONSET_VENDOR, -4158.27f, -3350.51f, 232.445f, 2.46742f, TEMPSUMMON_MANUAL_DESPAWN);
			// Tier Set vendors
			me->SummonCreature(NPC_TIER_1_VENDOR, -4268.51f, -3356.53f, 230.504f, 6.06279f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_2_VENDOR, -4269.41f, -3359.36f, 230.391f, 6.05006f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_3_VENDOR, -4270.29f, -3361.91f, 230.305f, 6.08523f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_4_VENDOR, -4270.78f, -3363.84f, 230.25f, 6.07437f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_5_VENDOR, -4271.14f, -3365.82f, 230.205f, 6.16077f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_6_VENDOR, -4267.91f, -3353.71f, 230.632f, 5.98749f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_7_VENDOR, -4271.71f, -3367.97f, 230.178f, 6.13986f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_8_VENDOR, -4272.14f, -3370.18f, 230.152f, 6.06391f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_9_A_VENDOR, -4165.4f, -3359.91f, 231.956f, 2.48342f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TIER_10_VENDOR, -4163.89f, -3357.62f, 232.029f, 2.61257f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arena Season Sets
			me->SummonCreature(NPC_ARENA_SEASON_1_VENDOR, -4272.71f, -3372.7f, 230.139f, 6.143f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_2_VENDOR, -4273.56f, -3375.09f, 230.179f, 6.14054f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_3_VENDOR, -4273.75f, -3377.13f, 230.181f, 6.18384f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_4_VENDOR, -4274.18f, -3379.28f, 230.246f, 6.16421f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_5_VENDOR, -4274.49f, -3381.27f, 230.309f, 6.21892f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_6_VENDOR, -4162.33f, -3355.58f, 232.053f, 2.60223f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_7_VENDOR, -4161.36f, -3354.26f, 232.153f, 2.49632f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SEASON_8_VENDOR, -4159.92f, -3352.52f, 232.118f, 2.50417f, TEMPSUMMON_MANUAL_DESPAWN);
			// Arena Masters/Transmogrification/Spectator/Multi System/Inkeeper/Guard
			me->SummonCreature(NPC_FUNNY_PANDA, -4170.29f, -3406.13f, 228.346f, 2.72329f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, -4333.03f, -3377.44f, 243.057f, 6.16644f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, -4124.97f, -3333.24f, 242.059f, 3.40595f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, -4260.34f, -3465.78f, 237.539f, 0.798847f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, -4259.48f, -3286.16f, 240.609f, 5.34965f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_VALENTION_GUARD, -4143.2f, -3416.82f, 235.615f, 2.75631f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRANSMOGRIFICATION, -4198.8f, -3357.35f, 232.124f, 0.84467f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_SPECTATOR, -4166.44f, -3321.24f, 231.904f, 4.2922f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_MULTI_SYSTEM, -4202.29f, -3440.49f, 226.117f, 1.87333f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_TRAINING_DUMMY, -4188.1f, -3421.88f, 226.929f, 2.62957f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_BATTLEMASTER, -4163.62f, -3322.79f, 232.108f, 4.2049f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_ARENA_ORGANIZER, -4161.6f, -3324.16f, 232.232f, 4.35916f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_INKEEPER, -4160.07f, -3325.35f, 232.316f, 4.14245f, TEMPSUMMON_MANUAL_DESPAWN);
			// Sakyra Cometic
			me->SummonCreature(NPC_SAKYRA, -4289.94f, -3358.36f, 232.064f, 3.93051f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4302.18f, -3371.51f, 232.032f, 1.26842f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4297.62f, -3372.37f, 231.972f, 1.76648f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4292.73f, -3371.14f, 231.885f, 1.94072f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4289.86f, -3368.62f, 231.885f, 2.73278f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4293.06f, -3355.08f, 232.323f, 4.22504f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4307.89f, -3363.9f, 232.207f, 0.023561f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4306.37f, -3368.88f, 231.995f, 0.585121f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4307.28f, -3358.61f, 232.169f, 5.89049f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4303.76f, -3354.35f, 232.041f, 5.25039f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4297.96f, -3353.27f, 232.142f, 4.58752f, TEMPSUMMON_MANUAL_DESPAWN);
			me->SummonCreature(NPC_SAKYRA, -4288.39f, -3361.5f, 231.887f, 3.33361f, TEMPSUMMON_MANUAL_DESPAWN);
		}

		void SummonAllianceGameObjects()
		{
			// Fountain
			if (GameObject* Fountain = me->SummonGameObject(GO_DALARAN_FOUNTAIN, -4207.35f, -3367.77f, 232.17f, 4.37498f, 0, 0, 0.815794f, -0.578342f, 7*DAY))
			{
				Fountain->SetGoState(GO_STATE_ACTIVE);
				Fountain->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			}
			// Benchs
			me->SummonGameObject(GO_BENCH, -4251.66f, -3407.79f, 231.18f, 4.79232f, 0, 0, 0.67829f, -0.734794f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4260.99f, -3420.77f, 232.201f, 0.152382f, 0, 0, 0.0761173f, 0.997099f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4205.49f, -3357.45f, 231.785f, 4.38515f, 0, 0, 0.812844f, -0.582481f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4200.94f, -3360.03f, 232.152f, 3.98067f, 0, 0, 0.913277f, -0.407339f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4260.5f, -3415.04f, 232.229f, 5.99967f, 0, 0, 0.141281f, -0.98997f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4256.71f, -3410.04f, 231.407f, 5.45697f, 0, 0, 0.401457f, -0.915878f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4245.89f, -3409.19f, 230.837f, 4.165f, 0, 0, 0.871911f, -0.489664f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4242.43f, -3413.97f, 230.45f, 3.47125f, 0, 0, 0.986447f, -0.164083f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4242.57f, -3419.88f, 230.251f, 2.86256f, 0, 0, 0.990284f, 0.139062f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4245.92f, -3425.16f, 230.461f, 2.2973f, 0, 0, 0.912212f, 0.409718f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4251.82f, -3427.27f, 230.739f, 1.57419f, 0, 0, 0.708307f, 0.705904f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4257.24f, -3425.48f, 231.423f, 0.984359f, 0, 0, 0.472548f, 0.881305f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4211.71f, -3377.3f, 232.04f, 1.24925f, 0, 0, 0.584792f, 0.811183f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4218.59f, -3371.53f, 232.046f, 0.443565f, 0, 0, 0.219969f, 0.975507f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4219.2f, -3365.96f, 231.919f, 6.07484f, 0, 0, 0.103984f, -0.994579f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4216.5f, -3360.6f, 231.679f, 5.57173f, 0, 0, 0.348271f, -0.937394f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4211.24f, -3357.44f, 231.612f, 5.06314f, 0, 0, 0.572886f, -0.819635f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4197.61f, -3364.52f, 232.417f, 3.54163f, 0, 0, 0.980063f, -0.198686f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4197.55f, -3369.86f, 232.298f, 2.89291f, 0, 0, 0.99228f, 0.124019f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4200.44f, -3374.31f, 232.106f, 2.37275f, 0, 0, 0.927016f, 0.375023f, 7*DAY);
			me->SummonGameObject(GO_BENCH, -4205.53f, -3377.36f, 232.001f, 1.82297f, 0, 0, 0.790415f, 0.612572f, 7*DAY);
			// Monument/Aura/Offering
			me->SummonGameObject(GO_MOMUMENT, -4251.35f, -3417.64f, 231.254f, 0.120112f, 0, 0, 0.0600201f, 0.998197f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4251.35f, -3417.64f, 231.254f, 0.120112f, 0, 0, 0.0600201f, 0.998197f, 7*DAY);
			me->SummonGameObject(GO_OFFERING, -4247.7f, -3416.95f, 231.034f, 3.34956f, 0, 0, 0.994598f, -0.103799f, 7*DAY);
			// Shaman Shrine/Shrine Aura/
			if (GameObject* Shrine = me->SummonGameObject(GO_SHAMAN_SHRINE, -4285.02f, -3401.23f, 232.339f, 6.2542f, 0, 0, 0.014491f, -0.999895f, 7*DAY))
				Shrine->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			me->SummonGameObject(GO_SHRINE_AURA, -4285.02f, -3401.23f, 232.339f, 6.12932f, 0, 0, 0.0768548f, -0.997042f, 7*DAY);
			// Lordaeron Shrine/Uther Shrine/Green Light/Dragon Soul
			if (GameObject* LordaeronShrine = me->SummonGameObject(GO_LORDAERON_SHRINE, -4227.72f, -3420.86f, 227.502f, 1.19326f, 0, 0, 0.561858f, 0.827233f, 7*DAY))
				LordaeronShrine->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_INTERACT_COND | GO_FLAG_NOT_SELECTABLE);
			me->SummonGameObject(GO_UTHER_SHRINE, -4227.72f, -3420.86f, 227.502f, 1.19326f, 0, 0, 0.561858f, 0.827233f, 7*DAY);
			me->SummonGameObject(GO_UTHER_SHRINE, -4298.59f, -3362.42f, 232.926f, 6.08114f, 0, 0, 0.100851f, -0.994901f, 7*DAY);
			me->SummonGameObject(GO_GREEN_LIGHT, -4188.11f, -3421.83f, 226.935f, 2.61099f, 0, 0, 0.965014f, 0.262198f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, -4228.36f, -3423.05f, 233.869f, 1.2506f, 0, 0, 0.585342f, 0.810786f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, -4226.25f, -3422.37f, 236.062f, 1.11923f, 0, 0, 0.53086f, 0.847459f, 7*DAY);
			me->SummonGameObject(GO_DRAGON_SOUL, -4229.2f, -3419.82f, 235.385f, 1.18206f, 0, 0, 0.557218f, 0.830366f, 7*DAY);
			// Coocking Table/Forge/Anvil/Alchemy Laboratory/Mailbox/Runeforge
			me->SummonGameObject(GO_COOCKING_TABLE, -4224.26f, -3310.42f, 232.287f, 3.03431f, 0, 0, 0.998562f, 0.053616f, 7*DAY);
			me->SummonGameObject(GO_FORGE, -4227.08f, -3322.61f, 231.785f, 6.17107f, 0, 0, 0.0560259f, -0.998429f, 7*DAY);
			me->SummonGameObject(GO_ANVIL, -4225.49f, -3314.76f, 232.174f, 4.28407f, 0, 0, 0.841233f, -0.540672f, 7*DAY);
			me->SummonGameObject(GO_MAILBOX, -4214.96f, -3375.8f, 232.061f, 1.0796f, 0, 0, 0.513965f, 0.857811f, 7*DAY);
			me->SummonGameObject(GO_ALCHEMY_LAB, -4255.8f, -3313.56f, 232.396f, 3.03271f, 0, 0, 0.998518f, 0.0544169f, 7*DAY);
			// History Cosmetic
			me->SummonGameObject(GO_ULDUAR_BRAIZER, -4266.19f, -3306.59f, 234.827f, 6.19747f, 0, 0, 0.0428461f, -0.999082f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_BRAIZER, -4270.61f, -3326.03f, 234.591f, 6.02806f, 0, 0, 0.127219f, -0.991875f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4207.18f, -3366.86f, 272.952f, 4.61311f, 0, 0, 0.741322f, -0.67115f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4289.27f, -3381.46f, 273.079f, 5.95946f, 0, 0, 0.161157f, -0.986929f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4249.16f, -3335.05f, 282.213f, 5.03583f, 0, 0, 0.584026f, -0.811735f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4153.83f, -3321.93f, 271.009f, 4.36351f, 0, 0, 0.819098f, -0.573653f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4190.05f, -3312.36f, 285.713f, 4.80098f, 0, 0, 0.675103f, -0.737723f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4139.52f, -3274.59f, 286.694f, 4.31325f, 0, 0, 0.833254f, -0.552891f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4216.13f, -3269.47f, 297.292f, 4.89367f, 0, 0, 0.6402f, -0.768209f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_POWER_ORB, -4285.64f, -3401.11f, 262.503f, 0.0351972f, 0, 0, 0.0175977f, 0.999845f, 7*DAY);
			me->SummonGameObject(GO_ULDUAR_ORB_AURA, -4275.36f, -3315.63f, 232.089f, 6.07093f, 0, 0, 0.105928f, -0.994374f, 7*DAY);
			me->SummonGameObject(GO_HELLSCREAM_STAT, -4274.25f, -3330.67f, 231.477f, 6.10503f, 0, 0, 0.0889592f, -0.996035f, 7*DAY);
			me->SummonGameObject(GO_UTHER_STATUE, -4236.89f, -3305.4f, 232.351f, 4.51412f, 0, 0, 0.773618f, -0.633652f, 7*DAY);
			me->SummonGameObject(GO_OWL_STATUE, -4275.36f, -3315.63f, 232.089f, 6.07093f, 0, 0, 0.105928f, -0.994374f, 7*DAY);
			me->SummonGameObject(GO_BLOOD_ELF_STATUE, -4274.25f, -3330.34f, 243.677f, 6.15216f, 0, 0, 0.0654674f, -0.997855f, 7*DAY);
			me->SummonGameObject(GO_WARIAN_STATUE, -4230.3f, -3307.88f, 232.202f, 4.44207f, 0, 0, 0.795938f, -0.605378f, 7*DAY);
			me->SummonGameObject(GO_KHADGAR_STATUE, -4274.53f, -3340.44f, 231.231f, 6.07736f, 0, 0, 0.102731f, -0.994709f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4236.89f, -3305.4f, 232.351f, 4.51412f, 0, 0, 0.773618f, -0.633652f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4230.3f, -3307.88f, 232.202f, 4.44207f, 0, 0, 0.795938f, -0.605378f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4274.53f, -3342.83f, 231.125f, 6.03959f, 0, 0, 0.121497f, -0.992592f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4279.48f, -3339.71f, 231.37f, 5.33195f, 0, 0, 0.457886f, -0.889011f, 7*DAY);
			me->SummonGameObject(GO_LIGHT_OF_DAWN, -4274.25f, -3330.67f, 231.477f, 6.10503f, 0, 0, 0.0889592f, -0.996035f, 7*DAY);
			me->SummonGameObject(GO_TELESTRA_ENERGY, -4202.23f, -3440.6f, 226.105f, 1.99345f, 0, 0, 0.839696f, 0.543057f, 7*DAY);
			me->SummonGameObject(GO_TELESTRA_CIRCLE, -4202.35f, -3440.61f, 226.856f, 2.09241f, 0, 0, 0.865529f, 0.500858f, 7*DAY);
		}

		void JustSummoned(Creature* summon)
		{
			switch (summon->GetEntry())
			{
			    case NPC_PALADIN_TRAINER:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					summon->SetUInt32Value(UNIT_NPC_EMOTE_STATE, EMOTE_STATE_SPELL_PRECAST);
					if (sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
						summon->AddAura(SPELL_PALADIN_HOLY_AURA, summon);
					Summons.Summon(summon);
					break;
				case NPC_WARLOCK_TRAINER:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					summon->SetUInt32Value(UNIT_NPC_EMOTE_STATE, EMOTE_STATE_SPELL_PRECAST);
					if (sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
						summon->AddAura(SPELL_TERON_FIRE_VISUAL, summon);
					Summons.Summon(summon);
					break;
				case NPC_MAGE_TRAINER:
				case NPC_SHAMAN_TRAINDER:
				case NPC_PRIEST_TRAINER:
				case NPC_WARRIOR_TRAINER:
				case NPC_HUNTER_TRAINER:
				case NPC_ROGUE_TRAINER:
				case NPC_DRUID_TRAINER:
				case NPC_DK_TRAINER:
				case NPC_MOUNT_TRAINER:
				case NPC_WEAPON_TRAINER:
				case NPC_FIREWORKS_VENDOR:
				case NPC_OLD_MOUNT_VENDOR:
				case NPC_MOUNT_VENDOR:
				case NPC_PETS_VENDOR:
				case NPC_ITEM_1_EPIC_VENDOR:
				case NPC_ITEM_2_EPIC_VENDOR:
				case NPC_FUNNY_VENDOR:
				case NPC_ARROW_VENDOR:
				case NPC_BAG_VENDOR:
				case NPC_PROF_BAG_VENDOR:
				case NPC_AMMO_VENDOR:
				case NPC_KEYS_VENDOR:
				case NPC_INSCRIPTION:
				case NPC_ENCHANTING:
				case NPC_ELEMENTAL:
				case NPC_MEAT_HERB:
				case NPC_METAL_STONE:
				case NPC_JEWEL_CLOTH:
				case NPC_DEVICE_EXPLOSIVE:
				case NPC_TRADE_GOODS:
				case NPC_OLD_REAGENTS_VENDOR:
				case NPC_GLYPH_WARLOCK_DRUID:
				case NPC_GLYPH_SHAMAN_MAGE:
				case NPC_GLYPH_PRIEST_DK:
				case NPC_GLYPH_HUNTER_ROGUE:
				case NPC_GLYPH_WARRIOR_PALADIN:
				case NPC_PRISMATIC_SOCKET:
				case NPC_META_SOCKET:
				case NPC_ORANGE_SOCKET:
				case NPC_GREEN_SOCKET:
				case NPC_PURPLE_SOCKET:
				case NPC_YELLOW_SOCKET:
				case NPC_BLUE_SOCKET:
				case NPC_RED_SOCKET:
				case NPC_REAGENT_VENDOR:
				case NPC_ELIXIR_VENDOR:
				case NPC_FOOD_DRINK_VENDOR:
				case NPC_POTIONS_VENDOR:
				case NPC_FLASK_VENDOR:
				case NPC_SCROLL_VENDOR:
				case NPC_ENCHANTMENT_VENDOR:
				case NPC_BANDAGE_VENDOR:
				case NPC_REPUTATION_VENDOR:
				case NPC_SHIRT_TABARD_VENDOR:
				case NPC_CLOACK_VENDOR:
				case NPC_SHIELD_VENDOR:
				case NPC_TOTEM_RELIC_VENDOR:
				case NPC_OFFHAND_VENDOR:
				case NPC_NECKLACE_VENDOR:
				case NPC_FINGERS_VENDOR:
				case NPC_TRINKETS_1_VENDOR:
				case NPC_TRINKETS_2_VENDOR:
				case NPC_HEIRLOOM_VENDOR:
				case NPC_THROWN_BOW_VENDOR:
				case NPC_DAGGER_FIST_VENDOR:
				case NPC_STAFF_VENDOR:
				case NPC_POLEARM_SWORD_VENDOR:
				case NPC_AXE_VENDOR:
				case NPC_GUN_VENDOR:
				case NPC_MACE_VENDOR:
				case NPC_HEAD_VENDOR:
				case NPC_CHEST_ROBE_VENDOR:
				case NPC_LEGS_PANTS_VENDOR:
				case NPC_GLOVES_HANDS_VENDOR:
				case NPC_SHOULDERS_VENDOR:
				case NPC_WAIST_LIGHT_VENDOR:
				case NPC_BOOTS_LIGHT_VENDOR:
				case NPC_BRACERS_LIGHT_VENDOR:
				case NPC_WAIST_HEAVY_VENDOR:
				case NPC_BOOTS_HEAVY_VENDOR:
				case NPC_BRACERS_HEAVY_VENDOR:
				case NPC_ARENA_NONSET_VENDOR:
				case NPC_TIER_3_VENDOR:
				case NPC_TIER_4_VENDOR:
				case NPC_TIER_5_VENDOR:
				case NPC_TIER_7_VENDOR:
				case NPC_TIER_8_VENDOR:
				case NPC_TIER_9_A_VENDOR:
				case NPC_TIER_9_H_VENDOR:
				case NPC_TIER_10_VENDOR:
				case NPC_ARENA_SEASON_1_VENDOR:
				case NPC_ARENA_SEASON_2_VENDOR:
				case NPC_ARENA_SEASON_3_VENDOR:
				case NPC_ARENA_SEASON_4_VENDOR:
				case NPC_ARENA_SEASON_5_VENDOR:
				case NPC_ARENA_SEASON_6_VENDOR:
				case NPC_ARENA_SEASON_7_VENDOR:
				case NPC_ARENA_SEASON_8_VENDOR:
				case NPC_FUNNY_PANDA:
				case NPC_SAKYRA:
				case NPC_ARENA_SPECTATOR:
				case NPC_MULTI_SYSTEM:
				case NPC_ARENA_ORGANIZER:
				case NPC_INKEEPER:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					summon->SetUInt32Value(UNIT_NPC_EMOTE_STATE, EMOTE_STATE_SPELL_PRECAST);
					Summons.Summon(summon);
					break;
				case NPC_TIER_1_VENDOR:
				case NPC_TIER_2_VENDOR:
				case NPC_TIER_6_VENDOR:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					// Check config
					if (sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
						summon->CastSpell(summon, SPELL_ELEMENTAL_PRISON, true);
					Summons.Summon(summon);
					break;
				case NPC_CARTEL_QUESTS:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->Mount(14776);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					Summons.Summon(summon);
					break;
				case NPC_BC_QUESTS:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->Mount(21473);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					Summons.Summon(summon);
					break;
				case NPC_WOTLK_QUESTS:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->Mount(29938);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					Summons.Summon(summon);
					break;
				case NPC_CLASSIC_QUESTS:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->Mount(19250);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					Summons.Summon(summon);
					break;
				case NPC_ARENA_BATTLEMASTER:
					summon->SetCurrentFaction(FACTION_FIENDLY);
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					summon->SetUInt32Value(UNIT_NPC_EMOTE_STATE, EMOTE_STATE_SPELL_PRECAST);
					Summons.Summon(summon);
					break;
				case NPC_TRAINING_DUMMY:
					summon->SetUInt32Value(UNIT_FIELD_BYTES_2, 1);
					Summons.Summon(summon);
					break;
				case NPC_TRANSMOGRIFICATION:
				case NPC_PROFESSION_TRAINER:
					Summons.Summon(summon);
					break;
				case NPC_VALENTION_GUARD:
					summon->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
					Summons.Summon(summon);
					break;
				default:
					break;
			}
		}

		void JustDied(Unit* /*killer*/)
		{
			Summons.DespawnAll();
		}

        void UpdateAI(uint32 const diff)
        {
			if (ResetFunSystemTimer <= diff
				&& sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE)
				&& !sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE))
			{
				Summons.DespawnAll();
				Reset();
				sWorld->SendWorldText(LANG_FUN_SYSTEM_RESTART);
				sLog->OutConsole("QUANTUMCORE NEW FUN: System Has Been Restarted! Next Restart Via: 35 minutes.");
				ResetFunSystemTimer = 35*MINUTE*IN_MILLISECONDS;
			}
			else ResetFunSystemTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_quantum_fun_controller_newAI(creature);
    }
};

class quantum_fun_start_system_new : public PlayerScript
{
public:
	quantum_fun_start_system_new() : PlayerScript("quantum_fun_start_system_new") {}

	uint64 PlayerGUID;

	void OnCreate(Player* player)
	{
		PlayerGUID = player->GetGUID();
	}

	void OnLogin(Player* player)
	{
		if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) && !sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE))
		{
			if (PlayerGUID == player->GetGUID())
			{
				if (player->GetCurrentClass() == CLASS_DEATH_KNIGHT || player->GetCurrentRace() == RACE_BLOOD_ELF || player->GetCurrentRace() == RACE_DRAENEI)
					return;

				if (player->GetCurrentRace() == RACE_ORC || player->GetCurrentRace() == RACE_TAUREN || player->GetCurrentRace() == RACE_TROLL)
				{
					WorldLocation loc;
					loc.m_mapId       = MAP_KALIMDOR;
					loc.m_positionX   = 3244.77f;
					loc.m_positionY   = -4458.32f;
					loc.m_positionZ   = 100.189f;
					loc.m_orientation = 1.01587f;
					player->TeleportTo(MAP_KALIMDOR, 3244.77f, -4458.32f, 100.189f, 1.01587f);
					player->SetHomebind(loc, AREA_HALDARR_ENCAMPMENT);
				}

				if (player->GetCurrentRace() == RACE_HUMAN || player->GetCurrentRace() == RACE_DWARF || player->GetCurrentRace() == RACE_GNOME)
				{
					WorldLocation loc;
					loc.m_mapId       = MAP_EASTERN_KINGDOMS;
					loc.m_positionX   = -4298.44f;
					loc.m_positionY   = -3362.37f;
					loc.m_positionZ   = 232.923f;
					loc.m_orientation = 6.02731f;
					player->TeleportTo(MAP_EASTERN_KINGDOMS, -4298.44f, -3362.37f, 232.923f, 6.02731f);
					player->SetHomebind(loc, AREA_GRIM_BATOL);
				}

				PlayerGUID = 0;
			}
		}
	}
};

class npc_valetion : public CreatureScript
{
public:
    npc_valetion() : CreatureScript("npc_valetion") {}

    struct npc_valetionAI : public  QuantumBasicAI
    {
        npc_valetionAI(Creature* creature) : QuantumBasicAI(creature){}

		uint32 SanctuaryTimer;

        void Reset()
        {
			SanctuaryTimer = 500;

			DoCast(me, SPELL_UNIT_DETECTION_ALL);
			DoCast(me, SPELL_FROST_SPOTLIGHT);

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

		void CheckSanctuary()
		{
			Map::PlayerList const& Players = me->GetMap()->GetPlayers();
			for (Map::PlayerList::const_iterator itr = Players.begin(); itr != Players.end(); ++itr)
			{
				if (Player* player = itr->getSource())
				{
					if (player->IsWithinDist(me, 550.0f))
					{
						// Azshara
						if (player->GetTeam() == ALLIANCE && player->GetAreaId() == AREA_HALDARR_ENCAMPMENT && !player->HasAura(SPELL_RESURRECTION_SICKNESS))
						{
							if (player->IsGameMaster())
								return;

							me->PlayDirectSound(SOUND_ALARM_KILLER);
							player->CastSpell(player, SPELL_RESURRECTION_SICKNESS, true);
							me->CastSpell(player, SPELL_MURMUR_TOUCH, true);
							sWorld->SendWorldText(LANG_FUN_GUARD_DETECT_PLAYER_HORDE, player->GetName());
						}
						// Grim Batol
						if (player->GetTeam() == HORDE && player->GetAreaId() == AREA_GRIM_BATOL && !player->HasAura(SPELL_RESURRECTION_SICKNESS))
						{
							if (player->IsGameMaster())
								return;

							me->PlayDirectSound(SOUND_ALARM_KILLER);
							player->CastSpell(player, SPELL_RESURRECTION_SICKNESS, true);
							me->CastSpell(player, SPELL_MURMUR_TOUCH, true);
							sWorld->SendWorldText(LANG_FUN_GUARD_DETECT_PLAYER_ALLIANCE, player->GetName());
						}
						// Orgrimmar
						if (player->GetTeam() == ALLIANCE && player->GetAreaId() == AREA_ORGRIMMAR && !player->HasAura(SPELL_RESURRECTION_SICKNESS))
						{
							if (player->IsGameMaster())
								return;

							me->PlayDirectSound(SOUND_ALARM_KILLER);
							player->CastSpell(player, SPELL_RESURRECTION_SICKNESS, true);
							me->CastSpell(player, SPELL_MURMUR_TOUCH, true);
							sWorld->SendWorldText(LANG_FUN_GUARD_DETECT_PLAYER_HORDE, player->GetName());
						}
						// Stormwind
						if (player->GetTeam() == HORDE && player->GetAreaId() == AREA_STORMWIND && !player->HasAura(SPELL_RESURRECTION_SICKNESS))
						{
							if (player->IsGameMaster())
								return;

							me->PlayDirectSound(SOUND_ALARM_KILLER);
							player->CastSpell(player, SPELL_RESURRECTION_SICKNESS, true);
							me->CastSpell(player, SPELL_MURMUR_TOUCH, true);
							sWorld->SendWorldText(LANG_FUN_GUARD_DETECT_PLAYER_ALLIANCE, player->GetName());
						}
					}
				}
			}
		}

        void UpdateAI(uint32 const diff)
        {
			if (SanctuaryTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_GUARD_DETECTION_ENABLE))
			{
				CheckSanctuary();
				SanctuaryTimer = 1*IN_MILLISECONDS;
			}
			else SanctuaryTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_valetionAI(creature);
    }
};

struct npc_check_auraAI : public QuantumBasicAI
{
    npc_check_auraAI(Creature* creature) : QuantumBasicAI(creature){}

    void CheckCascadeOfRoses()
    {
		if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_CASCADE_OF_ROSES_ENABLE))
		{
			if (!me->HasAuraEffect(SPELL_CASCADE_OF_ROSES, 0))
				DoCast(me, SPELL_CASCADE_OF_ROSES, true);
		}
    }
};

class npc_holy_priest_fun_vendor : public CreatureScript
{
public:
    npc_holy_priest_fun_vendor() : CreatureScript("npc_holy_priest_fun_vendor") {}

    struct npc_holy_priest_fun_vendorAI : public npc_check_auraAI
    {
        npc_holy_priest_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				if (!me->HasAura(SPELL_POWER_WORD_SHIELD))
					DoCast(me, SPELL_POWER_WORD_SHIELD, true);
			}

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_POWER_WORD_FORTITUDE, true);
				DoCast(me, SPELL_SHADOW_PROTECTION, true);
				DoCast(me, SPELL_DIVINE_SPIRIT, true);
				DoCast(me, SPELL_INNER_FIRE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_holy_priest_fun_vendorAI(creature);
    }
};

class npc_shadow_priest_fun_vendor : public CreatureScript
{
public:
    npc_shadow_priest_fun_vendor() : CreatureScript("npc_shadow_priest_fun_vendor") {}

    struct npc_shadow_priest_fun_vendorAI : public npc_check_auraAI
    {
        npc_shadow_priest_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_POWER_WORD_FORTITUDE, true);
				DoCast(me, SPELL_SHADOW_PROTECTION, true);
				DoCast(me, SPELL_DIVINE_SPIRIT, true);
				DoCast(me, SPELL_INNER_FIRE, true);
				DoCast(me, SPELL_VAMPYRIC_EMBRACE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_shadow_priest_fun_vendorAI(creature);
    }
};

class npc_rogue_fun_vendor : public CreatureScript
{
public:
    npc_rogue_fun_vendor() : CreatureScript("npc_rogue_fun_vendor") {}

    struct npc_rogue_fun_vendorAI : public npc_check_auraAI
    {
        npc_rogue_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetPowerType(POWER_ENERGY);
			me->SetPower(POWER_ENERGY, POWER_QUANTITY_MAX);

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_STAMINA, true);
				DoCast(me, SPELL_FLASK_OF_ENDLESS_RAGE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_rogue_fun_vendorAI(creature);
    }
};

class npc_frost_mage_fun_vendor : public CreatureScript
{
public:
    npc_frost_mage_fun_vendor() : CreatureScript("npc_frost_mage_fun_vendor") {}

    struct npc_frost_mage_fun_vendorAI : public npc_check_auraAI
    {
        npc_frost_mage_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_ICE_ARMOR, true);
				DoCast(me, SPELL_ARCANE_INTELLECT, true);
				DoCast(me, SPELL_DAMPEN_MAGIC, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_frost_mage_fun_vendorAI(creature);
    }
};

class npc_fire_mage_fun_vendor : public CreatureScript
{
public:
    npc_fire_mage_fun_vendor() : CreatureScript("npc_fire_mage_fun_vendor") {}

    struct npc_fire_mage_fun_vendorAI : public npc_check_auraAI
    {
        npc_fire_mage_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
		{
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_MOLTEN_ARMOR, true);
				DoCast(me, SPELL_ARCANE_INTELLECT, true);
				DoCast(me, SPELL_AMPLIFY_MAGIC, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_fire_mage_fun_vendorAI(creature);
    }
};

class npc_arcane_mage_fun_vendor : public CreatureScript
{
public:
    npc_arcane_mage_fun_vendor() : CreatureScript("npc_arcane_mage_fun_vendor") {}

    struct npc_arcane_mage_fun_vendorAI : public npc_check_auraAI
    {
        npc_arcane_mage_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_MAGE_ARMOR, true);
				DoCast(me, SPELL_ARCANE_INTELLECT, true);
				DoCast(me, SPELL_AMPLIFY_MAGIC, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_arcane_mage_fun_vendorAI(creature);
    }
};

class npc_paladin_fun_vendor : public CreatureScript
{
public:
    npc_paladin_fun_vendor() : CreatureScript("npc_paladin_fun_vendor") {}

    struct npc_paladin_fun_vendorAI : public npc_check_auraAI
    {
        npc_paladin_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_RETRIBUTION_AURA, true);
				DoCast(me, SPELL_SEAL_OF_LIGHT, true);
				DoCast(me, SPELL_BLESSING_OF_MIGHT, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_paladin_fun_vendorAI(creature);
    }
};

class npc_night_elf_mage_fun_vendor : public CreatureScript
{
public:
    npc_night_elf_mage_fun_vendor() : CreatureScript("npc_night_elf_mage_fun_vendor") {}

    struct npc_night_elf_mage_fun_vendorAI : public npc_check_auraAI
    {
        npc_night_elf_mage_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				if (!me->HasAura(SPELL_MANA_SHIELD))
					DoCast(me, SPELL_MANA_SHIELD, true);
			}

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_MAGE_ARMOR, true);
				DoCast(me, SPELL_DAMPEN_MAGIC, true);
				DoCast(me, SPELL_HOLY_CHAMPION, true);
				DoCast(me, SPELL_FLASK_OF_FROST_WYRM, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_night_elf_mage_fun_vendorAI(creature);
    }
};

class npc_druid_fun_vendor : public CreatureScript
{
public:
    npc_druid_fun_vendor() : CreatureScript("npc_druid_fun_vendor") {}

    struct npc_druid_fun_vendorAI : public npc_check_auraAI
    {
        npc_druid_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_THORNS, true);
				DoCast(me, SPELL_MARK_OF_THE_WILD, true);
				DoCast(me, SPELL_FLASK_OF_PURE_MOJO, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_druid_fun_vendorAI(creature);
    }
};

class npc_warrior_fun_vendor : public CreatureScript
{
public:
    npc_warrior_fun_vendor() : CreatureScript("npc_warrior_fun_vendor") {}

    struct npc_warrior_fun_vendorAI : public npc_check_auraAI
    {
        npc_warrior_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_MASTER_BUFF, true);
				DoCast(me, SPELL_FLASK_OF_STONEBLOOD, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_warrior_fun_vendorAI(creature);
    }
};

class npc_warlock_fun_vendor : public CreatureScript
{
public:
    npc_warlock_fun_vendor() : CreatureScript("npc_warlock_fun_vendor") {}

    struct npc_warlock_fun_vendorAI : public npc_check_auraAI
    {
        npc_warlock_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_DEMON_ARMOR, true);
				DoCast(me, SPELL_DETECT_INVISIBILITY, true);
				DoCast(me, SPELL_FLASK_OF_TONGUES, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_warlock_fun_vendorAI(creature);
    }
};

class npc_death_knight_fun_vendor : public CreatureScript
{
public:
    npc_death_knight_fun_vendor() : CreatureScript("npc_death_knight_fun_vendor") {}

    struct npc_death_knight_fun_vendorAI : public npc_check_auraAI
    {
        npc_death_knight_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				if (!me->HasAura(SPELL_BONE_ARMOR))
					DoCast(me, SPELL_BONE_ARMOR, true);
			}

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_FROST_PRESENCE, true);
				DoCast(me, SPELL_FLASK_OF_ENDLESS_RAGE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_death_knight_fun_vendorAI(creature);
    }
};

class npc_shaman_fun_vendor : public CreatureScript
{
public:
    npc_shaman_fun_vendor() : CreatureScript("npc_shaman_fun_vendor") {}

    struct npc_shaman_fun_vendorAI : public npc_check_auraAI
    {
        npc_shaman_fun_vendorAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_FLASK_OF_FROST_WYRM, true);
				DoCast(me, SPELL_HOLY_CHAMPION, true);
				DoCast(me, SPELL_LIGHTNING_SHIELD, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_shaman_fun_vendorAI(creature);
    }
};

class npc_paladin_fun_trainer : public CreatureScript
{
public:
    npc_paladin_fun_trainer() : CreatureScript("npc_paladin_fun_trainer") {}

    struct npc_paladin_fun_trainerAI : public npc_check_auraAI
    {
        npc_paladin_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;
		uint32 FlashOfLightTimer;
		uint32 HolyLightTimer;
		uint32 DivineProtectionTimer;
		uint32 HandOfFreedomTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;
			FlashOfLightTimer = 2000;
			HolyLightTimer = 4000;
			DivineProtectionTimer = 6000;
			HandOfFreedomTimer = 7000;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_SEAL_OF_WISDOM, true);
				DoCast(me, SPELL_BLESSING_OF_WISDOM, true);
				DoCast(me, SPELL_FLASK_OF_FROST_WYRM, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

			if (sWorld->getBoolConfig(CONFIG_FUN_TRAINER_CAST_CLASS_SPELLS))
			{
				if (FlashOfLightTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_FLASH_OF_LIGHT);
					FlashOfLightTimer = urand(5000, 6000);
				}
				else FlashOfLightTimer -= diff;

				if (HolyLightTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_HOLY_LIGHT);
					HolyLightTimer = urand(8000, 9000);
				}
				else HolyLightTimer -= diff;

				if (DivineProtectionTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_DIVINE_PROTECTION);
					DivineProtectionTimer = urand(17000, 18000);
				}
				else DivineProtectionTimer -= diff;

				if (HandOfFreedomTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_HAND_OF_FREEDOM);
					HandOfFreedomTimer = urand(13000, 14000);
				}
				else HandOfFreedomTimer -= diff;
			}

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_paladin_fun_trainerAI(creature);
    }
};

class npc_mage_fun_trainer : public CreatureScript
{
public:
    npc_mage_fun_trainer() : CreatureScript("npc_mage_fun_trainer") {}

    struct npc_mage_fun_trainerAI : public npc_check_auraAI
    {
        npc_mage_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				if (!me->HasAura(SPELL_SNOWFLAKES))
					DoCast(me, SPELL_SNOWFLAKES, true);
			}

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_ICE_ARMOR, true);
				DoCast(me, SPELL_ARCANE_INTELLECT, true);
				DoCast(me, SPELL_DAMPEN_MAGIC, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_mage_fun_trainerAI(creature);
    }
};

class npc_shaman_fun_trainer : public CreatureScript
{
public:
    npc_shaman_fun_trainer() : CreatureScript("npc_shaman_fun_trainer") {}

    struct npc_shaman_fun_trainerAI : public npc_check_auraAI
    {
        npc_shaman_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;
		uint32 LesserHealingWaveTimer;
		uint32 HealingWaveTimer;
		uint32 ChainHealTimer;
		uint32 RiptideTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;
			LesserHealingWaveTimer = 2000;
			HealingWaveTimer = 4000;
			ChainHealTimer = 6000;
			RiptideTimer = 7000;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_WATER_WALKING, true);
				DoCast(me, SPELL_EARTH_SHIELD, true);
				DoCast(me, SPELL_BRILLIANCE, true);
				DoCast(me, SPELL_FLASK_OF_TONGUES, true);
				DoCast(me, SPELL_WILD_GROWTH_VISUAL, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

			if (sWorld->getBoolConfig(CONFIG_FUN_TRAINER_CAST_CLASS_SPELLS))
			{
				if (LesserHealingWaveTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_LESSER_HEALING_WAVE);
					LesserHealingWaveTimer = urand(5000, 6000);
				}
				else LesserHealingWaveTimer -= diff;

				if (HealingWaveTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_HEALING_WAVE);
					HealingWaveTimer = urand(8000, 9000);
				}
				else HealingWaveTimer -= diff;

				if (ChainHealTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_CHAIN_HEAL);
					ChainHealTimer = urand(11000, 12000);
				}
				else ChainHealTimer -= diff;

				if (RiptideTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_RIPTIDE);
					RiptideTimer = urand(19000, 20000);
				}
				else RiptideTimer -= diff;
			}

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_shaman_fun_trainerAI(creature);
    }
};

class npc_priest_fun_trainer : public CreatureScript
{
public:
    npc_priest_fun_trainer() : CreatureScript("npc_priest_fun_trainer") {}

    struct npc_priest_fun_trainerAI : public npc_check_auraAI
    {
        npc_priest_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;
		uint32 FlashHealTimer;
		uint32 GreaterHealTimer;
		uint32 RenewTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;
			FlashHealTimer = 2000;
			GreaterHealTimer = 4000;
			RenewTimer = 6000;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_REFLECTIVE_SHIELD, true);
				DoCast(me, SPELL_POWER_WORD_FORTITUDE, true);
				DoCast(me, SPELL_DIVINE_SPIRIT, true);
				DoCast(me, SPELL_INNER_FIRE, true);
				DoCast(me, SPELL_SHADOW_PROTECTION, true);
				DoCast(me, SPELL_WILD_GROWTH_VISUAL, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

			if (sWorld->getBoolConfig(CONFIG_FUN_TRAINER_CAST_CLASS_SPELLS))
			{
				if (FlashHealTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_FLASH_HEAL);
					FlashHealTimer = urand(5000, 6000);
				}
				else FlashHealTimer -= diff;

				if (GreaterHealTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_GREATER_HEAL);
					GreaterHealTimer = urand(8000, 9000);
				}
				else GreaterHealTimer -= diff;

				if (RenewTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_RENEW);
					RenewTimer = urand(11000, 12000);
				}
				else RenewTimer -= diff;
			}

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_priest_fun_trainerAI(creature);
    }
};

class npc_druid_fun_trainer : public CreatureScript
{
public:
    npc_druid_fun_trainer() : CreatureScript("npc_druid_fun_trainer") {}

    struct npc_druid_fun_trainerAI : public npc_check_auraAI
    {
        npc_druid_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;
		uint32 NourishTimer;
		uint32 RejuvenationTimer;
		uint32 RegrowthTimer;
		uint32 WildGrowthTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;
			NourishTimer = 2000;
			RejuvenationTimer = 4000;
			RegrowthTimer = 6000;
			WildGrowthTimer = 8000;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_MARK_OF_THE_WILD, true);
				DoCast(me, SPELL_THORNS, true);
				DoCast(me, SPELL_FLASK_OF_PURE_MOJO, true);
				DoCast(me, SPELL_WILD_GROWTH_VISUAL, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

			if (sWorld->getBoolConfig(CONFIG_FUN_TRAINER_CAST_CLASS_SPELLS))
			{
				if (NourishTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_NOURISH);
					NourishTimer = urand(5000, 6000);
				}
				else NourishTimer -= diff;

				if (RejuvenationTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_REJUVENATION);
					RejuvenationTimer = urand(8000, 9000);
				}
				else RejuvenationTimer -= diff;

				if (RegrowthTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_REGROWTH);
					RegrowthTimer = urand(11000, 12000);
				}
				else RegrowthTimer -= diff;

				if (WildGrowthTimer <= diff && !me->IsInCombatActive())
				{
					DoCast(me, SPELL_WILD_GROWTH);
					WildGrowthTimer = urand(13000, 14000);
				}
				else WildGrowthTimer -= diff;
			}

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_druid_fun_trainerAI(creature);
    }
};

class npc_hunter_fun_trainer : public CreatureScript
{
public:
    npc_hunter_fun_trainer() : CreatureScript("npc_hunter_fun_trainer") {}

    struct npc_hunter_fun_trainerAI : public npc_check_auraAI
    {
        npc_hunter_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_TRUESHOT_AURA, true);
				DoCast(me, SPELL_ASPECT_OF_THE_PACK, true);
				DoCast(me, SPELL_STAMINA, true);
				DoCast(me, SPELL_FLASK_OF_ENDLESS_RAGE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_hunter_fun_trainerAI(creature);
    }
};

class npc_death_knight_fun_trainer : public CreatureScript
{
public:
    npc_death_knight_fun_trainer() : CreatureScript("npc_death_knight_fun_trainer") {}

    struct npc_death_knight_fun_trainerAI : public npc_check_auraAI
    {
        npc_death_knight_fun_trainerAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (!me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				if (!me->HasAura(SPELL_BONE_ARMOR))
					DoCast(me, SPELL_BONE_ARMOR, true);
			}

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_BLOOD_PRESENCE, true);
				DoCast(me, SPELL_SHADOW_FORM_VISUAL, true);
				DoCast(me, SPELL_FLASK_OF_ENDLESS_RAGE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_death_knight_fun_trainerAI(creature);
    }
};

class npc_reputation_changer_classic : public CreatureScript
{
public:
    npc_reputation_changer_classic() : CreatureScript("npc_reputation_changer_classic") { }

	bool OnGossipHello(Player* player, Creature* creature)
	{
		if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) || (sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE)))
		{
			player->PlayerTalkClass->ClearMenus();
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THORIUM_BROTHERHOOD), GOSSIP_SENDER_MAIN, ACTION_THORIUM_BROTHERHOOD);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_BLOODSAIL_BUCCANEERS), GOSSIP_SENDER_MAIN, ACTION_BLOODSAIL_BUCCANEERS);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_GELKIS_CLAN_CENTAUR), GOSSIP_SENDER_MAIN, ACTION_GELKIS_CLAN_CENTAUR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_MAGRAM_CLAN_CENTAUR), GOSSIP_SENDER_MAIN, ACTION_MAGRAM_CLAN_CENTAUR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ZANDALAR_TRIBE), GOSSIP_SENDER_MAIN, ACTION_ZANDALAR_TRIBE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_RAVENHOLDT), GOSSIP_SENDER_MAIN, ACTION_RAVENHOLDT);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ARGENT_DAWN), GOSSIP_SENDER_MAIN, ACTION_ARGENT_DAWN);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_TIMBERMAW_HOLD), GOSSIP_SENDER_MAIN, ACTION_TIMBERMAW_HOLD);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_CENARION_CIRCLE), GOSSIP_SENDER_MAIN, ACTION_CENARION_CIRCLE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_HYDRAXIAN_WATERLORDS), GOSSIP_SENDER_MAIN, ACTION_HYDRAXIAN_WATERLORDS);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_SHENDRALAR), GOSSIP_SENDER_MAIN, ACTION_SHENDRALAR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_DARKMOON_FAIRE), GOSSIP_SENDER_MAIN, ACTION_DARKMOON_FAIRE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_BROOD_OF_NOZDORMU), GOSSIP_SENDER_MAIN, ACTION_BROOD_OF_NOZDORMU);
			player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());
			return true;
		}
		return true;
	}

	bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)
	{
		player->PlayerTalkClass->ClearMenus();

		switch (action)
		{
		    case ACTION_THORIUM_BROTHERHOOD:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THORIUM_BROTHERHOOD), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_BLOODSAIL_BUCCANEERS:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_BLOODSAIL_BUCCANEERS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_GELKIS_CLAN_CENTAUR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_GELKIS_CLAN_CENTAUR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_MAGRAM_CLAN_CENTAUR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_MAGRAM_CLAN_CENTAUR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_ZANDALAR_TRIBE:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_ZANDALAR_TRIBE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_RAVENHOLDT:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_RAVENHOLDT), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_ARGENT_DAWN:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_ARGENT_DAWN), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_TIMBERMAW_HOLD:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_TIMBERMAW_HOLD), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_CENARION_CIRCLE:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_CENARION_CIRCLE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_HYDRAXIAN_WATERLORDS:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_HYDRAXIAN_WATERLORDS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_SHENDRALAR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SHENDRALAR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_DARKMOON_FAIRE:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_DARKMOON_FAIRE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_BROOD_OF_NOZDORMU:
				player->CastSpell(player, SPELL_REWARD_VISUAL_RED, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_BROOD_OF_NOZDORMU), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
		}
		return true;
	}

	struct npc_reputation_changer_classicAI : public npc_check_auraAI
    {
        npc_reputation_changer_classicAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetPowerType(POWER_ENERGY);
			me->SetPower(POWER_ENERGY, POWER_QUANTITY_MAX);

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_STAMINA, true);
				DoCast(me, SPELL_FLASK_OF_ENDLESS_RAGE, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_reputation_changer_classicAI(creature);
    }
};

class npc_reputation_changer_bc : public CreatureScript
{
public:
    npc_reputation_changer_bc() : CreatureScript("npc_reputation_changer_bc") { }

	bool OnGossipHello(Player* player, Creature* creature)
	{
		if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) || (sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE)))
		{
			player->PlayerTalkClass->ClearMenus();
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_ALDOR), GOSSIP_SENDER_MAIN, ACTION_THE_ALDOR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_CONSORTIUM), GOSSIP_SENDER_MAIN, ACTION_CONSORTIUM);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SCRYERS), GOSSIP_SENDER_MAIN, ACTION_THE_SCRYERS);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SHATAR), GOSSIP_SENDER_MAIN, ACTION_THE_SHATAR);
			// HORDE
			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_TRANQUILLIEN), GOSSIP_SENDER_MAIN, ACTION_TRANQUILLIEN);
			// HORDE
			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_MAGHAR), GOSSIP_SENDER_MAIN, ACTION_THE_MAGHAR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_CENARION_EXPEDITION), GOSSIP_SENDER_MAIN, ACTION_CENARION_EXPEDITION);
			// ALLIANCE
			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_HONOR_HOLD), GOSSIP_SENDER_MAIN, ACTION_HONOR_HOLD);
			// HORDE
			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_THRALLMAR), GOSSIP_SENDER_MAIN, ACTION_THE_THRALLMAR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_VIOLET_EYE), GOSSIP_SENDER_MAIN, ACTION_THE_VIOLET_EYE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_SPOREGGAR), GOSSIP_SENDER_MAIN, ACTION_SPOREGGAR);
			// ALLIANCE
			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_KURENAI), GOSSIP_SENDER_MAIN, ACTION_KURENAI);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_KEEPERS_OF_TIME), GOSSIP_SENDER_MAIN, ACTION_KEEPERS_OF_TIME);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SCALE_OF_SANDS), GOSSIP_SENDER_MAIN, ACTION_THE_SCALE_OF_SANDS);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_LOWER_CITY), GOSSIP_SENDER_MAIN, ACTION_LOWER_CITY);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ASHTONGUE_DEATHSWORN), GOSSIP_SENDER_MAIN, ACTION_ASHTONGUE_DEATHSWORN);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_NETHERWING), GOSSIP_SENDER_MAIN, ACTION_NETHERWING);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_SHATARI_SKYGUARD), GOSSIP_SENDER_MAIN, ACTION_SHATARI_SKYGUARD);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_OGRILA), GOSSIP_SENDER_MAIN, ACTION_OGRILA);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_SHATTERED_SUN_OFFENSIVE), GOSSIP_SENDER_MAIN, ACTION_SHATTERED_SUN_OFFENSIVE);
			player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());
			return true;
		}
		return true;
	}

	bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)
	{
		player->PlayerTalkClass->ClearMenus();

		switch (action)
		{
		    case ACTION_THE_ALDOR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_ALDOR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_CONSORTIUM:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_CONSORTIUM), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SCRYERS:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SCRYERS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SHATAR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SHATAR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_TRANQUILLIEN:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_TRANQUILLIEN), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_MAGHAR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_MAGHAR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_CENARION_EXPEDITION:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_CENARION_EXPEDITION), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_HONOR_HOLD:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_HONOR_HOLD), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_THRALLMAR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_THRALLMAR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_VIOLET_EYE:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_VIOLET_EYE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_SPOREGGAR:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SPOREGGAR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_KURENAI:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_KURENAI), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_KEEPERS_OF_TIME:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_KEEPERS_OF_TIME), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SCALE_OF_SANDS:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SCALE_OF_SANDS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_LOWER_CITY:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_LOWER_CITY), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_ASHTONGUE_DEATHSWORN:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_ASHTONGUE_DEATHSWORN), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_NETHERWING:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_NETHERWING), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_SHATARI_SKYGUARD:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SHATARI_SKYGUARD), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_OGRILA:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_OGRILA), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_SHATTERED_SUN_OFFENSIVE:
				player->CastSpell(player, SPELL_REWARD_VISUAL_BLUE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SHATTERED_SUN_OFFENSIVE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
		}
		return true;
	}

	struct npc_reputation_changer_bcAI : public npc_check_auraAI
    {
        npc_reputation_changer_bcAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_WATER_WALKING, true);
				DoCast(me, SPELL_EARTH_SHIELD, true);
				DoCast(me, SPELL_BRILLIANCE, true);
				DoCast(me, SPELL_FLASK_OF_TONGUES, true);
				DoCast(me, SPELL_WILD_GROWTH_VISUAL, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_reputation_changer_bcAI(creature);
    }
};

class npc_reputation_changer_cartel : public CreatureScript
{
public:
    npc_reputation_changer_cartel() : CreatureScript("npc_reputation_changer_cartel") { }

	bool OnGossipHello(Player* player, Creature* creature)
	{
		if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) || (sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE)))
		{
			player->PlayerTalkClass->ClearMenus();

			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ALLIANCE_FACTIONS), GOSSIP_SENDER_MAIN, ACTION_ALLIANCE_FACTIONS);

			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ALLIANCE_BG_FACTIONS), GOSSIP_SENDER_MAIN, ACTION_ALLIANCE_BG_FACTIONS);

			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_HORDE_FACTIONS), GOSSIP_SENDER_MAIN, ACTION_HORDE_FACTIONS);

			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_HORDE_BG_FACTIONS), GOSSIP_SENDER_MAIN, ACTION_HORDE_BG_FACTIONS);

			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_BOOTY_BAY), GOSSIP_SENDER_MAIN, ACTION_BOOTY_BAY);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_SYNDICATE), GOSSIP_SENDER_MAIN, ACTION_SYNDICATE);

			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_WINTERSABER_TRAINERS), GOSSIP_SENDER_MAIN, ACTION_WINTERSABER_TRAINERS);

			player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());
			return true;
		}
		return true;
	}

	bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)
	{
		player->PlayerTalkClass->ClearMenus();

		switch (action)
		{
		    case ACTION_ALLIANCE_FACTIONS:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_IRONFORGE), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_GNOMREGAN_EXILES), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_DARNASSUS), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_STORMWIND), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_EXODAR), 42999);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_HORDE_FACTIONS:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_UNDERCITY), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_ORGRIMMAR), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_THUNDER_BLUFF), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_DARKSPEAR_TROLLS), 42999);
				player->GetReputationMgr().ModifyReputation(sFactionStore.LookupEntry(FACTION_SILVERMOON_CITY), 42999);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_ALLIANCE_BG_FACTIONS:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_LEAGUE_OF_ARATHOR), 96000);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_STORMSPIKE_GUARD), 96000);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SILVERWING_SENTINELS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_HORDE_BG_FACTIONS:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_DEFILERS), 96000);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_FROSTWOLF_CLAN), 96000);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_WARSONG_OUTRIDERS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_BOOTY_BAY:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_BOOTY_BAY), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_SYNDICATE:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_SYNDICATE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_WINTERSABER_TRAINERS:
				player->CastSpell(player, SPELL_REWARD_PURPLE, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_WINTERSABER_TRAINERS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
		}
		return true;
	}

	struct npc_reputation_changer_cartelAI : public npc_check_auraAI
    {
        npc_reputation_changer_cartelAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_BLESSING_OF_KINGS, true);
				DoCast(me, SPELL_ICE_ARMOR, true);
				DoCast(me, SPELL_ARCANE_INTELLECT, true);
				DoCast(me, SPELL_DAMPEN_MAGIC, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_reputation_changer_cartelAI(creature);
    }
};

class npc_reputation_changer_wotlk : public CreatureScript
{
public:
    npc_reputation_changer_wotlk() : CreatureScript("npc_reputation_changer_wotlk") { }

	bool OnGossipHello(Player* player, Creature* creature)
	{
		if (sWorld->getBoolConfig(CONFIG_NEW_FUN_SERVER_SYSTEM_ENABLE) || (sWorld->getBoolConfig(CONFIG_OLD_FUN_SERVER_SYSTEM_ENABLE)))
		{
			player->PlayerTalkClass->ClearMenus();
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_KALUAK), GOSSIP_SENDER_MAIN, ACTION_THE_KALUAK);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_KIRIN_TOR), GOSSIP_SENDER_MAIN, ACTION_KIRIN_TOR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_WYRMREST_ACCORD), GOSSIP_SENDER_MAIN, ACTION_THE_WYRMREST_ACCORD);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_KNIGHTS_THE_EBON_BLADE), GOSSIP_SENDER_MAIN, ACTION_KNIGHTS_THE_EBON_BLADE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_FRENZYHEART_TRIBE), GOSSIP_SENDER_MAIN, ACTION_FRENZYHEART_TRIBE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_ORACLES), GOSSIP_SENDER_MAIN, ACTION_THE_ORACLES);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_ARGENT_CRUSADE), GOSSIP_SENDER_MAIN, ACTION_ARGENT_CRUSADE);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SONS_OF_HODIR), GOSSIP_SENDER_MAIN, ACTION_THE_SONS_OF_HODIR);
			player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_ASHEN_VERDICT), GOSSIP_SENDER_MAIN, ACTION_THE_ASHEN_VERDICT);
			// ALLIANCE
			if (player->GetTeam() == ALLIANCE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SILVER_COVENANT), GOSSIP_SENDER_MAIN, ACTION_THE_SILVER_COVENANT);
			// HORDE
			if (player->GetTeam() == HORDE)
				player->ADD_GOSSIP_ITEM(GOSSIP_ICON_TALK, sObjectMgr->GetQuantumSystemTextForDBCLocale(TEXT_ID_THE_SUNREAVERS), GOSSIP_SENDER_MAIN, ACTION_THE_SUNREAVERS);
			player->SEND_GOSSIP_MENU(player->GetGossipTextId(creature), creature->GetGUID());
			return true;
		}
		return true;
	}

	bool OnGossipSelect(Player* player, Creature* creature, uint32 /*sender*/, uint32 action)
	{
		player->PlayerTalkClass->ClearMenus();

		switch (action)
		{
			case ACTION_THE_KALUAK:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_KALUAK), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_KIRIN_TOR:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_KIRIN_TOR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_WYRMREST_ACCORD:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_WYRMREST_ACCORD), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SILVER_COVENANT:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SILVER_COVENANT), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_KNIGHTS_THE_EBON_BLADE:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_KNIGHTS_THE_EBON_BLADE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_FRENZYHEART_TRIBE:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_FRENZYHEART_TRIBE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_ORACLES:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_ORACLES), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_ARGENT_CRUSADE:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_ARGENT_CRUSADE), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SONS_OF_HODIR:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SONS_OF_HODIR), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_SUNREAVERS:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_SUNREAVERS), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
			case ACTION_THE_ASHEN_VERDICT:
				player->CastSpell(player, SPELL_REWARD_GREEN, true);
				player->GetReputationMgr().SetReputation(sFactionStore.LookupEntry(FACTION_THE_ASHEN_VERDICT), 96000);
				player->CLOSE_GOSSIP_MENU();
				break;
		}
		return true;
	}

	struct npc_reputation_changer_wotlkAI : public npc_check_auraAI
    {
        npc_reputation_changer_wotlkAI(Creature* creature) : npc_check_auraAI(creature){}

		uint32 BuffTimer;

        void Reset()
        {
			BuffTimer = 0.5*IN_MILLISECONDS;

			me->SetUInt32Value(UNIT_FIELD_BYTES_2, FIELD_BYTE_2_MELEE_WEAPON);
        }

        void UpdateAI(uint32 const diff)
        {
			CheckCascadeOfRoses();

			if (BuffTimer <= diff && !me->IsInCombatActive() && sWorld->getBoolConfig(CONFIG_FUN_BUFF_FOR_VENDORS_ENABLE))
			{
				DoCast(me, SPELL_RETRIBUTION_AURA, true);
				DoCast(me, SPELL_SEAL_OF_LIGHT, true);
				DoCast(me, SPELL_BLESSING_OF_WISDOM, true);
				DoCast(me, SPELL_HOLY_CHAMPION, true);
				DoCast(me, SPELL_FLASK_OF_FROST_WYRM, true);

				BuffTimer = 10*MINUTE*IN_MILLISECONDS;
			}
			else BuffTimer -= diff;

            if (!UpdateVictim())
                return;

			DoMeleeAttackIfReady();
        }
    };

    CreatureAI* GetAI(Creature* creature) const
    {
        return new npc_reputation_changer_wotlkAI(creature);
    }
};

class go_fun_dk_teleporter_new : public GameObjectScript
{
public:
	go_fun_dk_teleporter_new() : GameObjectScript("go_fun_dk_teleporter_new") {}

	bool OnGossipHello(Player* player, GameObject* /*go*/)
	{
		player->RemoveMount();
		player->RemoveAurasByType(SPELL_AURA_MOUNTED);

		if (player->GetTeam() == HORDE)
		{
			player->SetGameMaster(true);
			WorldLocation loc;
			loc.m_mapId       = MAP_KALIMDOR;
			loc.m_positionX   = 3244.77f;
			loc.m_positionY   = -4458.32f;
			loc.m_positionZ   = 100.189f;
			loc.m_orientation = 1.01587f;
			player->TeleportTo(MAP_KALIMDOR, 3244.77f, -4458.32f, 100.189f, 1.01587f);
			player->SetHomebind(loc, AREA_HALDARR_ENCAMPMENT);
			player->SetGameMaster(false);
		}

		if (player->GetTeam() == ALLIANCE)
		{
			player->SetGameMaster(true);
			WorldLocation loc;
			loc.m_mapId       = MAP_EASTERN_KINGDOMS;
			loc.m_positionX   = -4298.44f;
			loc.m_positionY   = -3362.37f;
			loc.m_positionZ   = 232.923f;
			loc.m_orientation = 6.02731f;
			player->TeleportTo(MAP_EASTERN_KINGDOMS, -4298.44f, -3362.37f, 232.923f, 6.02731f);
			player->SetHomebind(loc, AREA_GRIM_BATOL);
			player->SetGameMaster(false);
		}

		return true;
	}
};

void AddSC_world_fun_new_system()
{
	new npc_quantum_fun_controller_new();
	new quantum_fun_start_system_new();
	new npc_valetion();
	new npc_holy_priest_fun_vendor();
	new npc_shadow_priest_fun_vendor();
	new npc_rogue_fun_vendor();
	new npc_frost_mage_fun_vendor();
	new npc_fire_mage_fun_vendor();
	new npc_arcane_mage_fun_vendor();
	new npc_paladin_fun_vendor();
	new npc_night_elf_mage_fun_vendor();
	new npc_druid_fun_vendor();
	new npc_warrior_fun_vendor();
	new npc_warlock_fun_vendor();
	new npc_death_knight_fun_vendor();
	new npc_shaman_fun_vendor();
	new npc_paladin_fun_trainer();
	new npc_mage_fun_trainer();
	new npc_shaman_fun_trainer();
	new npc_priest_fun_trainer();
	new npc_druid_fun_trainer();
	new npc_hunter_fun_trainer();
	new npc_death_knight_fun_trainer();
	new npc_reputation_changer_classic();
	new npc_reputation_changer_bc();
	new npc_reputation_changer_cartel();
	new npc_reputation_changer_wotlk();
	new go_fun_dk_teleporter_new();
}

/*UPDATE `creature_template` SET `exp` = 2, `unit_class` = 8,
`Health_mod` = 1, `Mana_mod` = 3.5, `flags_extra` = 0,
`unit_flags` = 0, `type_flags` = 0, `Armor_mod` = 1,
`mindmg` = 208, `maxdmg` = 309, `dmg_multiplier` = 1,
`baseattacktime` = 2000, `rangeattacktime` = 2000,
`minrangedmg` = 102, `maxrangedmg` = 207,
`rangedattackpower` = 88, `attackpower` = 176,
`unit_flags2` = 2048, `type` = 7,
`faction_A` = 35, `faction_H` = 35,
`dynamicflags` = 8, `speed_walk` = 1,
`speed_run` = 1, `mingold` = 0, `maxgold` = 0,
`minlevel` = 83, `maxlevel` = 83, `rank` = 2,
`modelid2` = 0, `modelid3` = 0, `modelid4` = 0,
`AIName` = '', `ScriptName` = 'npc_fire_mage_fun_vendor',
`resistance1` = 0, `resistance2` = 0, `resistance3` = 0,
`resistance4` = 0, `resistance5` = 0, `resistance6` = 0, `trainer_type` = 0 WHERE `entry` IN (46077);*/